// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;

import edu.wpi.first.networktables.NetworkTable;
import edu.wpi.first.networktables.NetworkTableInstance;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.SubsystemBase;


public class Vision extends SubsystemBase {
    
    // NetworkTable table = NetworkTableInstance.getDefault().getTable("limelight");
    // NetworkTableEntry tx = table.getEntry("tx");
    // NetworkTableEntry ty = table.getEntry("ty");
    // NetworkTableEntry ta = table.getEntry("ta");

    // double x = tx.getDouble(0.0);
    // double y = tx.getDouble(0.0);
    // double area = ta.getDouble(0.0);

    private NetworkTable table;
    private boolean isConnected = false;

    public Vision() {
        table = NetworkTableInstance.getDefault().getTable("vision");
    }

    public boolean isConnected() {
        return isConnected;
    }
    
    public boolean isTargetFound() {
        return !(table.getEntry("tv").getDouble(0) == 0f); 
    }

    public double getHorizontalDegToTarget() {
        return table.getEntry("tx").getDouble(0);
    }

    public double getVerticalDegToTarget() {
        return table.getEntry("ty").getDouble(0);
    }

    public double getTargetArea() {
        return table.getEntry("ta").getDouble(0);
    }

    public double getSkewRotation() {
        return table.getEntry("ts").getDouble(0);
    }

    public double getPipelineLatency() {
        return table.getEntry("tl").getDouble(0);
    }

    private void resetPipelineLatency() {
        table.getEntry("tl").setValue(0.0);
    }
    /**
     * @param pipeline
     */
    public void setPipeline(int pipeline) {
        if (pipeline < 0)
    }
    public void log() {
        SmartDashboard.putNumber("LimelightX", getHorizontalDegToTarget());
        SmartDashboard.putNumber("LimelightY", getVerticalDegToTarget());
        SmartDashboard.putNumber("LimelightArea", getTargetArea());
    }

    @Override
    public void periodic() {
        log();
    }

}

