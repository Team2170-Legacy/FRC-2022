// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.
package frc.robot.subsystems;
import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.can.TalonSRX;

import edu.wpi.first.wpilibj2.command.SubsystemBase;

import edu.wpi.first.wpilibj.Encoder;

import frc.robot.Constants;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class Drivetrain extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private TalonSRX left1;
    private TalonSRX left2;
    private TalonSRX right1;
    private TalonSRX right2;
    private Encoder encoderL;
    private Encoder encoderR;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
    *
    */
    public Drivetrain() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        left1 = new TalonSRX(Constants.kLeftMotor1Port);

        left2 = new TalonSRX(Constants.kLeftMotor2Port);

        right1 = new TalonSRX(Constants.kRightMotor1Port);

        right2 = new TalonSRX(Constants.kRightMotor2Port);

        encoderL = new Encoder(0,1);
        encoderL.setDistancePerPulse(((Constants.wheelRadius*2)^2)/2048);

        encoderR = new Encoder(2,3);
        encoderR.setDistancePerPulse(((Constants.wheelRadius*2)^2)/2048);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void Drive(int side, double speed) {
        //double halfSpeed = (double)(speed / 3);
        //speed = halfSpeed;
        if (side == 0) {
            this.left1.set(ControlMode.PercentOutput, speed);
            this.left2.set(ControlMode.PercentOutput, speed);
        } else {
            this.right1.set(ControlMode.PercentOutput, speed);
            this.right2.set(ControlMode.PercentOutput, speed);
        }
    }

    public void SetInverted(){
        this.right1.setInverted(true);
        this.right2.setInverted(true);
    }

    public Encoder getEncoders(int num){
        if (num==0){
            return encoderL;
        }else{
            return encoderR;
        }
    }
}

